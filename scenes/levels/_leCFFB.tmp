[gd_scene load_steps=25 format=3 uid="uid://dvpgb2jrxx8p1"]

[ext_resource type="Script" path="res://scripts/modes/gm_freeroam.gd" id="1_8mwe0"]
[ext_resource type="PackedScene" uid="uid://bdyfbnq4358i5" path="res://scenes/characters/char_rock_lee.tscn" id="3_m2bip"]
[ext_resource type="Script" path="res://scripts/core_characters/behaviour/driver_player.gd" id="5_66keu"]
[ext_resource type="Script" path="res://scripts/characters/npcd_basic_game_dude.gd" id="6_538dh"]
[ext_resource type="PackedScene" uid="uid://b0p47j3ar04x8" path="res://_dev/widget/_wid_dev_hud.tscn" id="7_urvor"]
[ext_resource type="PackedScene" uid="uid://duiag5itq7dxf" path="res://scenes/widget/wid_game.tscn" id="8_e1eu0"]
[ext_resource type="Script" path="res://scripts/core_tools/env_helper.gd" id="10_10c1j"]
[ext_resource type="PackedScene" uid="uid://bcodt2rcm5f7a" path="res://scenes/fx/location_fx/fx_location_mist_soft.tscn" id="11_a2q6q"]
[ext_resource type="PackedScene" uid="uid://dbwbgsbyjn8rd" path="res://scenes/area_affects/af_fireplace.tscn" id="11_me8eh"]
[ext_resource type="MeshLibrary" uid="uid://svtnrvr0ko6v" path="res://assets/meshlibs/mlib_jerdelia_a.tres" id="12_1psnx"]
[ext_resource type="MeshLibrary" uid="uid://bkd8f1a12u0eu" path="res://assets/meshlibs/mlib_jerdelia_b.tres" id="12_8840w"]
[ext_resource type="NavigationMesh" uid="uid://bgx5alovo2u6x" path="res://resources/misc/navmesh_settings_a1.tres" id="12_usyif"]
[ext_resource type="PackedScene" uid="uid://b5b6dg5k1g4mk" path="res://scenes/misc/camera_rig.tscn" id="12_wbav5"]
[ext_resource type="PackedScene" uid="uid://cgseiay2l8uf" path="res://scenes/characters/char_boxed_slime.tscn" id="13_xgsen"]

[sub_resource type="Shader" id="Shader_mggth"]
code = "// Cloud Raymarching based on: A. Schneider. “The Real-Time Volumetric Cloudscapes Of Horizon: Zero Dawn”. ACM SIGGRAPH. Los Angeles, CA: ACM SIGGRAPH, 2015. Web. 26 Aug. 2015.

shader_type sky;
render_mode use_half_res_pass, use_quarter_res_pass;

uniform sampler3D worlnoise : filter_linear_mipmap, repeat_enable;
uniform sampler3D perlworlnoise : filter_linear_mipmap, repeat_enable;
uniform sampler2D weathermap : filter_linear_mipmap, repeat_enable;

uniform vec2 wind_direction = vec2(1, 0);
uniform float wind_speed :hint_range(0.0, 20.0) = 1.0;
uniform float _density : hint_range(0.01, 0.2) = 0.05;
uniform float cloud_coverage :hint_range(0.1, 1.0) = 0.25;
uniform float _time_offset : hint_range(0.0, 1000.0, 0.5) = 0.0;

// Approximately earth sizes
const float g_radius = 6000000.0; //ground radius
const float sky_b_radius = 6001500.0;//bottom of cloud layer
const float sky_t_radius = 6004000.0;//top of cloud layer

uniform float rayleigh : hint_range(0, 64) = 2.0;
uniform vec4 rayleigh_color : source_color = vec4(0.26, 0.41, 0.58, 1.0);
uniform float mie : hint_range(0, 1) = 0.005;
uniform float mie_eccentricity : hint_range(-1, 1) = 0.8;
uniform vec4 mie_color : source_color = vec4(0.63, 0.77, 0.92, 1.0);

uniform float turbidity : hint_range(0, 1000) = 10.0;
uniform float sun_disk_scale : hint_range(0, 360) = 1.0;
uniform vec4 ground_color : source_color = vec4(1.0);
uniform float exposure : hint_range(0, 128) = 0.1;

const vec3 UP = vec3( 0.0, 1.0, 0.0 );

// Sun constants
const float SOL_SIZE = 0.00872663806;
const float SUN_ENERGY = 1000.0;

// optical length at zenith for molecules
const float rayleigh_zenith_size = 8.4e3;
const float mie_zenith_size = 1.25e3;

// From: https://www.shadertoy.com/view/4sfGzS credit to iq
float hash(vec3 p) {
	p  = fract( p * 0.3183099 + 0.1 );
	p *= 17.0;
	return fract(p.x * p.y * p.z * (p.x + p.y + p.z));
}

// Utility function that maps a value from one range to another. 
float remap(float originalValue,  float originalMin,  float originalMax,  float newMin,  float newMax) {
	return newMin + (((originalValue - originalMin) / (originalMax - originalMin)) * (newMax - newMin));
}

// Phase function
float henyey_greenstein(float cos_theta, float g) {
	const float k = 0.0795774715459;
	return k * (1.0 - g * g) / (pow(1.0 + g * g - 2.0 * g * cos_theta, 1.5));
}

// Simple Analytic sky. In a real project you should use a texture
vec3 atmosphere(vec3 eye_dir) {
	float zenith_angle = clamp( dot(UP, normalize(LIGHT0_DIRECTION)), -1.0, 1.0 );
	float sun_energy = max(0.0, 1.0 - exp(-((PI * 0.5) - acos(zenith_angle)))) * SUN_ENERGY * LIGHT0_ENERGY;
	float sun_fade = 1.0 - clamp(1.0 - exp(LIGHT0_DIRECTION.y), 0.0, 1.0);

	// Rayleigh coefficients.
	float rayleigh_coefficient = rayleigh - ( 1.0 * ( 1.0 - sun_fade ) );
	vec3 rayleigh_beta = rayleigh_coefficient * rayleigh_color.rgb * 0.0001;
	// mie coefficients from Preetham
	vec3 mie_beta = turbidity * mie * mie_color.rgb * 0.000434;

	// optical length
	float zenith = acos(max(0.0, dot(UP, eye_dir)));
	float optical_mass = 1.0 / (cos(zenith) + 0.15 * pow(93.885 - degrees(zenith), -1.253));
	float rayleigh_scatter = rayleigh_zenith_size * optical_mass;
	float mie_scatter = mie_zenith_size * optical_mass;

	// light extinction based on thickness of atmosphere
	vec3 extinction = exp(-(rayleigh_beta * rayleigh_scatter + mie_beta * mie_scatter));

	// in scattering
	float cos_theta = dot(eye_dir, normalize(LIGHT0_DIRECTION));

	float rayleigh_phase = (3.0 / (16.0 * PI)) * (1.0 + pow(cos_theta * 0.5 + 0.5, 2.0));
	vec3 betaRTheta = rayleigh_beta * rayleigh_phase;

	float mie_phase = henyey_greenstein(cos_theta, mie_eccentricity);
	vec3 betaMTheta = mie_beta * mie_phase;

	vec3 Lin = pow(sun_energy * ((betaRTheta + betaMTheta) / (rayleigh_beta + mie_beta)) * (1.0 - extinction), vec3(1.5));
	// Hack from https://github.com/mrdoob/three.js/blob/master/examples/jsm/objects/Sky.js
	Lin *= mix(vec3(1.0), pow(sun_energy * ((betaRTheta + betaMTheta) / (rayleigh_beta + mie_beta)) * extinction, vec3(0.5)), clamp(pow(1.0 - zenith_angle, 5.0), 0.0, 1.0));

	// Hack in the ground color
	Lin  *= mix(ground_color.rgb, vec3(1.0), smoothstep(-0.1, 0.1, dot(UP, eye_dir)));

	// Solar disk and out-scattering
	float sunAngularDiameterCos = cos(SOL_SIZE * sun_disk_scale);
	float sunAngularDiameterCos2 = cos(SOL_SIZE * sun_disk_scale*0.5);
	float sundisk = smoothstep(sunAngularDiameterCos, sunAngularDiameterCos2, cos_theta);
	vec3 L0 = (sun_energy * 1900.0 * extinction) * sundisk * LIGHT0_COLOR;
	// Note: Add nightime here: L0 += night_sky * extinction

	vec3 color = (Lin + L0) * 0.04;
	color = pow(color, vec3(1.0 / (1.2 + (1.2 * sun_fade))));
	color *= exposure;
	return color;
}

float GetHeightFractionForPoint(float inPosition) { 
	float height_fraction = (inPosition -  sky_b_radius) / (sky_t_radius - sky_b_radius); 
	return clamp(height_fraction, 0.0, 1.0);
}

vec4 mixGradients(float cloudType){
	const vec4 STRATUS_GRADIENT = vec4(0.02f, 0.05f, 0.09f, 0.11f);
	const vec4 STRATOCUMULUS_GRADIENT = vec4(0.02f, 0.2f, 0.48f, 0.625f);
	const vec4 CUMULUS_GRADIENT = vec4(0.01f, 0.0625f, 0.78f, 1.0f);
	float stratus = 1.0f - clamp(cloudType * 2.0f, 0.0, 1.0);
	float stratocumulus = 1.0f - abs(cloudType - 0.5f) * 2.0f;
	float cumulus = clamp(cloudType - 0.5f, 0.0, 1.0) * 2.0f;
	return STRATUS_GRADIENT * stratus + STRATOCUMULUS_GRADIENT * stratocumulus + CUMULUS_GRADIENT * cumulus;
}

float densityHeightGradient(float heightFrac, float cloudType) {
	vec4 cloudGradient = mixGradients(cloudType);
	return smoothstep(cloudGradient.x, cloudGradient.y, heightFrac) - smoothstep(cloudGradient.z, cloudGradient.w, heightFrac);
}

float intersectSphere(vec3 pos, vec3 dir,float r) {
    float a = dot(dir, dir);
    float b = 2.0 * dot(dir, pos);
    float c = dot(pos, pos) - (r * r);
	float d = sqrt((b*b) - 4.0*a*c);
	float p = -b - d;
	float p2 = -b + d;
    return max(p, p2) / (2.0 * a);
}

// Returns density at a given point
// Heavily based on method from Schneider
float density(vec3 pip, vec3 weather, float mip) {
	float time = TIME;
	vec3 p = pip;
	float height_fraction = GetHeightFractionForPoint(length(p));
	p.xz += time * 20.0 * normalize(wind_direction) * wind_speed * 0.6;
	vec4 n = textureLod(perlworlnoise, p.xyz*0.00008, mip-2.0);
	float fbm = n.g*0.625+n.b*0.25+n.a*0.125;
	float g = densityHeightGradient(height_fraction, weather.r);
	float base_cloud = remap(n.r, -(1.0-fbm), 1.0, 0.0, 1.0);
	float weather_coverage = cloud_coverage*weather.b;
	base_cloud = remap(base_cloud*g, 1.0-(weather_coverage), 1.0, 0.0, 1.0);
	base_cloud *= weather_coverage;
	p.xz -= time * normalize(wind_direction) * 40.;
	p.y -= time * 40.;
	vec3 hn = textureLod(worlnoise, p*0.001, mip).rgb;
	float hfbm = hn.r*0.625+hn.g*0.25+hn.b*0.125;
	hfbm = mix(hfbm, 1.0-hfbm, clamp(height_fraction*4.0, 0.0, 1.0));
	base_cloud = remap(base_cloud, hfbm*0.4 * height_fraction, 1.0, 0.0, 1.0);
	return pow(clamp(base_cloud, 0.0, 1.0), (1.0 - height_fraction) * 0.8 + 0.5);
}

vec4 march(vec3 pos,  vec3 end, vec3 dir, int depth) {
	const vec3 RANDOM_VECTORS[6] = {vec3( 0.38051305f,  0.92453449f, -0.02111345f),vec3(-0.50625799f, -0.03590792f, -0.86163418f),vec3(-0.32509218f, -0.94557439f,  0.01428793f),vec3( 0.09026238f, -0.27376545f,  0.95755165f),vec3( 0.28128598f,  0.42443639f, -0.86065785f),vec3(-0.16852403f,  0.14748697f,  0.97460106f)};
	float T = 1.0;
	float alpha = 0.0;
	float ss = length(dir);
	dir = normalize(dir);
	vec3 p = pos + hash(pos * 10.0) * ss;
	const float t_dist = sky_t_radius-sky_b_radius;
	float lss = (t_dist / 36.0);
	vec3 ldir = normalize(LIGHT0_DIRECTION);
	vec3 L = vec3(0.0);
	int count=0;
	float t = 1.0;
	float costheta = dot(ldir, dir);
	// Stack multiple phase functions to emulate some backscattering
	float phase = max(max(henyey_greenstein(costheta, 0.6), henyey_greenstein(costheta, (0.4 - 1.4 * ldir.y))), henyey_greenstein(costheta, -0.2));
	// Precalculate sun and ambient colors
	// This should really come from a uniform or texture for performance reasons
	vec3 atmosphere_sun = atmosphere(LIGHT0_DIRECTION) * LIGHT0_ENERGY * ss * 0.1;
	vec3 atmosphere_ambient = atmosphere(normalize(vec3(1.0, 1.0, 0.0)));
	vec3 atmosphere_ground = atmosphere(normalize(vec3(1.0, -1.0, 0.0)));
	
	const float weather_scale = 0.00006;
	float time = TIME * 0.001 + 0.005 * _time_offset;
	vec2 weather_pos = time * normalize(wind_direction) * wind_speed;
	
	for (int i = 0; i < depth; i++) {
		p += dir * ss;
		vec3 weather_sample = texture(weathermap, p.xz * weather_scale + 0.5 + weather_pos).xyz;
		float height_fraction = GetHeightFractionForPoint(length(p));

		t = density(p, weather_sample, 0.0);
		float dt = exp(-_density*t*ss);
		T *= dt;
		vec3 lp = p;
		float lt = 1.0;
		float cd = 0.0;

		if (t > 0.0) { //calculate lighting, but only when we are in the cloud
			float lheight_fraction = 0.0;
			for (int j = 0; j < 6; j++) {
				lp += (ldir + RANDOM_VECTORS[j]*float(j))*lss;
				lheight_fraction = GetHeightFractionForPoint(length(lp));
				vec3 lweather = texture(weathermap, lp.xz * weather_scale + 0.5 + weather_pos).xyz;
				lt = density(lp, lweather, float(j));
				cd += lt;
			}
			
			// Take a single distant sample
			lp = p + ldir * 18.0 * lss;
			lheight_fraction = GetHeightFractionForPoint(length(lp));
			vec3 lweather = texture(weathermap, lp.xz * weather_scale + 0.5).xyz;
			lt = pow(density(lp, lweather, 5.0), (1.0 - lheight_fraction) * 0.8 + 0.5);
			cd += lt;
			
			// captures the direct lighting from the sun
			float beers = exp(-_density * cd * lss);
			float beers2 = exp(-_density * cd * lss * 0.25) * 0.7;
			float beers_total = max(beers, beers2);

			vec3 ambient = mix(atmosphere_ground, vec3(1.0), smoothstep(0.0, 1.0, height_fraction)) * _density * mix(atmosphere_ambient, vec3(1.0), 0.4) * (LIGHT0_DIRECTION.y);
			alpha += (1.0 - dt) * (1.0 - alpha);
			L += (ambient + beers_total * atmosphere_sun * phase * alpha) * T * t;
		}
	}
	return clamp(vec4(L, alpha), 0.0, 1.0);
}

void sky() {
	vec3 dir = EYEDIR;

	vec4 col = vec4(0.0);
	if (dir.y>0.0) {
		vec3 camPos = vec3(0.0, g_radius, 0.0);
		vec3 start = camPos + dir * intersectSphere(camPos, dir, sky_b_radius);
		vec3 end = camPos + dir * intersectSphere(camPos, dir, sky_t_radius);
		float shelldist = (length(end-start));
		// Take fewer steps towards horizon
		float steps = (mix(96.0, 54.0, clamp(dot(dir, vec3(0.0, 1.0, 0.0)), 0.0, 1.0)));
		vec3 raystep = dir * shelldist / steps;
		vec4 volume = march(start, end, raystep, int(steps));
		vec3 background = atmosphere(dir);
		// Draw cloud shape
		col = vec4(background*(1.0-volume.a)+volume.xyz, 1.0);
		// Blend distant clouds into the sky
		col.xyz = mix(clamp(col.xyz, vec3(0.0), vec3(1.0)), clamp(background, vec3(0.0), vec3(1.0)), smoothstep(0.6, 1.0, 1.0-dir.y));
	} else {
		col = vec4(atmosphere(dir), 1.0);
	}
	
	// Draw to quarter res buffer for reflections
	// Draw to half res buffer for main sky
	if (AT_QUARTER_RES_PASS && AT_CUBEMAP_PASS) {
		COLOR = col.xyz;
		ALPHA = 1.0;
	} else if (AT_HALF_RES_PASS && !AT_CUBEMAP_PASS) {
		COLOR = col.xyz;
		ALPHA = 1.0;
	} else if (AT_CUBEMAP_PASS) {
		COLOR = QUARTER_RES_COLOR.rgb;
	} else {
		COLOR = HALF_RES_COLOR.rgb; // Change to col.rgb for full resolution
	}
}"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_5mw4b"]

[sub_resource type="NoiseTexture3D" id="NoiseTexture3D_6071y"]
noise = SubResource("FastNoiseLite_5mw4b")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_xfh2g"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_gi5k0"]
noise = SubResource("FastNoiseLite_xfh2g")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_nj1q7"]

[sub_resource type="NoiseTexture3D" id="NoiseTexture3D_ml2vc"]
noise = SubResource("FastNoiseLite_nj1q7")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_j0ifh"]
shader = SubResource("Shader_mggth")
shader_parameter/wind_direction = Vector2(1, 1)
shader_parameter/wind_speed = 10.0
shader_parameter/_density = 0.05
shader_parameter/cloud_coverage = 0.5
shader_parameter/_time_offset = 0.0
shader_parameter/rayleigh = 6.829
shader_parameter/rayleigh_color = Color(0.26, 0.41, 0.58, 1)
shader_parameter/mie = 0.005
shader_parameter/mie_eccentricity = 0.8
shader_parameter/mie_color = Color(0.63, 0.77, 0.92, 1)
shader_parameter/turbidity = 10.0
shader_parameter/sun_disk_scale = 1.0
shader_parameter/ground_color = Color(0.196078, 0.196078, 0.196078, 1)
shader_parameter/exposure = 0.1
shader_parameter/worlnoise = SubResource("NoiseTexture3D_ml2vc")
shader_parameter/perlworlnoise = SubResource("NoiseTexture3D_6071y")
shader_parameter/weathermap = SubResource("NoiseTexture2D_gi5k0")

[sub_resource type="Sky" id="Sky_xefpb"]
sky_material = SubResource("ShaderMaterial_j0ifh")

[sub_resource type="Environment" id="Environment_fiae8"]
background_mode = 2
sky = SubResource("Sky_xefpb")
ambient_light_source = 3
reflected_light_source = 2
tonemap_mode = 3
ssao_enabled = true
ssao_radius = 0.58
ssao_intensity = 16.0
ssao_power = 0.861523
sdfgi_enabled = true
sdfgi_y_scale = 0
glow_enabled = true
glow_normalized = true
glow_intensity = 1.6
glow_bloom = 0.5
fog_enabled = true
fog_light_color = Color(0.364706, 0.364706, 0.364706, 1)
fog_sky_affect = 0.0
volumetric_fog_enabled = true
volumetric_fog_density = 0.025
volumetric_fog_sky_affect = 0.0
adjustment_enabled = true
adjustment_brightness = 1.15
adjustment_saturation = 1.5

[node name="LevelFreeroam" type="Node3D"]
script = ExtResource("1_8mwe0")
default_game_scene = null
player_driver = Object(Node,"_import_path":NodePath(""),"unique_name_in_owner":false,"process_mode":0,"process_priority":0,"process_physics_priority":0,"process_thread_group":0,"editor_description":"","script":ExtResource("5_66keu"))

npc_driver = Object(Node,"_import_path":NodePath(""),"unique_name_in_owner":false,"process_mode":0,"process_priority":0,"process_physics_priority":0,"process_thread_group":0,"editor_description":"","script":ExtResource("6_538dh"))


[node name="GPlayerDriver" type="Node" parent="."]
script = ExtResource("5_66keu")

[node name="GNpcDriver" type="Node" parent="."]
script = ExtResource("6_538dh")

[node name="_DevGUI" parent="." instance=ExtResource("7_urvor")]

[node name="GUI" parent="." instance=ExtResource("8_e1eu0")]

[node name="Environment" type="Node3D" parent="."]

[node name="WorldEnvironment" type="WorldEnvironment" parent="Environment"]
environment = SubResource("Environment_fiae8")
script = ExtResource("10_10c1j")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="Environment"]
transform = Transform3D(-0.716119, 0.334922, -0.612372, -0.0226699, 0.865729, 0.5, 0.697609, 0.371942, -0.612372, 0, 7.32464, 0)
light_color = Color(0.905882, 0.862745, 0.854902, 1)
light_energy = 0.5
shadow_enabled = true

[node name="LocationMistSoft" parent="Environment" instance=ExtResource("11_a2q6q")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2.95683, 0)
visible = false
amount = 16

[node name="Architecture" type="Node3D" parent="."]

[node name="CameraRig" parent="." instance=ExtResource("12_wbav5")]

[node name="mobs" type="Node3D" parent="."]

[node name="BoxedSlime" parent="mobs" instance=ExtResource("13_xgsen")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 8.46626, 0, -0.654832)
is_friendly = true

[node name="RockLee" parent="." instance=ExtResource("3_m2bip")]
use_as_player = true

[node name="AF_FireplaceA" parent="." instance=ExtResource("11_me8eh")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -3.45215, 0, -1.51966)

[node name="AF_FireplaceA_2" parent="." node_paths=PackedStringArray("repeat_procedures", "gizmo") instance=ExtResource("11_me8eh")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -9.52946, 0, 1.46547)
repeat_procedures = [NodePath("../AF_FireplaceA/GDamageProcedure")]
gizmo = NodePath("../AF_FireplaceA/CollisionShape3D/Gizmo")

[node name="AF_FireplaceA_3" parent="." node_paths=PackedStringArray("repeat_procedures", "gizmo") instance=ExtResource("11_me8eh")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -9.52946, 0, 1.11536)
repeat_procedures = [NodePath("../AF_FireplaceA/GDamageProcedure")]
gizmo = NodePath("../AF_FireplaceA/CollisionShape3D/Gizmo")

[node name="AF_FireplaceA_4" parent="." node_paths=PackedStringArray("repeat_procedures", "gizmo") instance=ExtResource("11_me8eh")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -9.18023, 0, 1.16237)
repeat_procedures = [NodePath("../AF_FireplaceA/GDamageProcedure")]
gizmo = NodePath("../AF_FireplaceA/CollisionShape3D/Gizmo")

[node name="nav_region" type="NavigationRegion3D" parent="."]
navigation_mesh = ExtResource("12_usyif")

[node name="floor" type="GridMap" parent="nav_region"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.5, 0)
mesh_library = ExtResource("12_1psnx")
cell_size = Vector3(1, 1, 1)
data = {
"cells": PackedInt32Array(65535, 0, 1048579, 65534, 65535, 3, 7, 0, 1048579, 8, 0, 3, 9, 65535, 3, 9, 65534, 3, 8, 65534, 3, 8, 65535, 3, 3, 2, 1048579, 1, 2, 1048579, 2, 1, 1048579, 3, 1, 1048579, 4, 1, 1048579, 4, 5, 1441795, 5, 5, 1441795, 6, 5, 1441795, 7, 6, 3, 3, 10, 1441795, 5, 4, 1048579, 5, 3, 1048579, 5, 2, 1048579, 4, 2, 1048579, 5, 65529, 1441795, 6, 65525, 1441795, 5, 65525, 1048579, 5, 65524, 1048579, 4, 65524, 3, 3, 65523, 1048579, 2, 65523, 3, 1, 65522, 3, 0, 65522, 3, 65535, 65522, 3, 0, 65527, 3, 65535, 65530, 1441795, 65535, 65531, 1441795, 65535, 65532, 1441795, 0, 65532, 1441795, 65534, 65531, 1441795, 65533, 65531, 1441795, 65532, 65531, 3, 65530, 65529, 1441795, 2, 65534, 1441795, 7, 65530, 1441795, 3, 65533, 3, 3, 65534, 1441795, 2, 65527, 3, 2, 65526, 3, 3, 65526, 3, 4, 65526, 3, 7, 65526, 1441795, 7, 65527, 1441795, 6, 65527, 3, 6, 65528, 1441795, 4, 65531, 1048579, 9, 65529, 3, 11, 65532, 3, 9, 65533, 1441795, 8, 65533, 1441795, 12, 65533, 3, 12, 65534, 1441795, 12, 0, 3, 11, 1, 3, 12, 2, 1441795, 11, 4, 1048579, 10, 4, 1441795, 7, 3, 655363, 9, 3, 1441795, 7, 9, 1441795, 6, 9, 1441795, 5, 9, 1441795, 4, 8, 1441795, 3, 8, 1441795, 65529, 6, 655363, 65533, 2, 1441795, 65533, 3, 1441795, 65535, 4, 1441795, 65533, 7, 1441795, 65531, 7, 1441795, 65531, 6, 1441795, 65531, 5, 3, 65530, 2, 3, 65527, 65534, 1441795, 65527, 65533, 1441795, 65526, 65534, 1048579, 65526, 65535, 1441795, 65529, 2, 3, 65526, 1, 1048579, 65530, 0, 1441795, 65529, 0, 1441795, 65529, 65532, 1441795, 65528, 65532, 1441795, 65529, 65531, 1441795, 65530, 65531, 1441795, 65530, 65528, 1441795, 65527, 65524, 3, 65531, 65527, 1441795, 65531, 65528, 1441795, 65533, 65527, 3, 65533, 65526, 1441795, 65532, 65526, 3, 65531, 65526, 1441795, 65530, 65525, 1048579, 65530, 65527, 1441795, 65526, 2, 3, 65526, 5, 1441795, 65527, 5, 3, 65527, 6, 1441795, 65528, 6, 3, 65524, 65535, 1441795, 65528, 65533, 1441795, 65531, 65525, 1441795, 65533, 65530, 1441795, 1, 65531, 1441795, 2, 65530, 1441795, 4, 65532, 1048579, 5, 65535, 1048579, 5, 0, 1048579, 7, 2, 1441795, 7, 1, 1441795, 6, 2, 1048579, 6, 3, 1048579, 6, 4, 1441795, 4, 7, 1441795, 7, 8, 1441795, 6, 8, 1441795, 5, 8, 1441795, 0, 7, 1441795, 1, 7, 1441795, 0, 6, 1441795, 65535, 5, 1441795, 65535, 7, 655363, 6, 7, 1441795, 2, 3, 1441795, 1, 3, 1048579, 2, 4, 1048579, 1, 5, 1441795, 65534, 0, 1048579, 65531, 1, 1441795, 65531, 0, 1441795, 65527, 65530, 1441795, 65526, 65528, 1441795, 65525, 65528, 1441795, 65525, 65529, 1441795, 65526, 65532, 1441795, 0, 65534, 1441795, 0, 65533, 1441795, 1, 65533, 1441795, 1, 65532, 1048579, 1, 65530, 1441795, 0, 65526, 1441795, 1, 65526, 1441795, 1, 65525, 1441795, 65534, 65528, 1441795, 65529, 65528, 1048579, 65526, 65526, 1441795, 65523, 65524, 1441795, 65523, 65525, 1441795, 65526, 65529, 1441795, 65526, 65530, 1441795, 65525, 0, 1441795, 65523, 65533, 1441795, 65524, 65531, 1441795, 65524, 65532, 1441795, 65523, 65535, 1441795, 65523, 0, 1441795, 65523, 1, 1441795, 65522, 65535, 1441795, 65524, 0, 1441795, 65525, 1, 1441795, 65525, 2, 1441795, 65521, 65535, 1441795, 65525, 4, 1048579, 65525, 5, 1441795, 65526, 6, 1441795, 65527, 7, 1441795, 65528, 7, 1441795, 65528, 8, 1441795, 65529, 10, 1441795, 65530, 9, 1441795, 65531, 9, 655363, 65532, 9, 655363, 65534, 9, 1441795, 65534, 10, 1441795, 65535, 10, 1441795, 7, 10, 1441795, 65533, 10, 655363, 8, 6, 1048579, 7, 7, 1048579, 8, 8, 1441795, 9, 6, 1441795, 9, 5, 1441795, 14, 65534, 1048579, 15, 65533, 1048579, 8, 1, 1048579, 11, 65535, 1048579, 11, 65534, 1048579, 11, 65533, 1441795, 12, 65532, 1048579, 12, 65531, 1048579, 13, 65531, 1048579, 14, 65530, 1048579, 13, 65530, 1048579, 12, 65530, 1048579, 11, 65530, 1048579, 9, 65530, 1048579, 6, 65532, 1441795, 5, 65530, 1441795, 2, 65522, 1048579, 2, 65521, 1048579, 3, 65521, 1048579, 3, 65522, 1048579, 4, 65523, 1048579, 11, 65531, 1048579, 9, 65532, 1048579, 8, 65532, 1441795, 7, 65532, 1048579, 7, 65531, 1048579, 9, 65527, 1048579, 9, 65528, 1048579, 8, 65528, 1048579, 8, 65529, 1048579, 7, 65529, 1441795, 65534, 65526, 1441795, 65534, 65527, 1441795, 65530, 65526, 1441795, 65527, 65521, 1048579, 65527, 65522, 1048579, 65527, 65523, 1048579, 65528, 65523, 1048579, 65528, 65524, 1441795, 65528, 65525, 1441795, 65528, 65526, 1441795, 65529, 65526, 1441795, 65529, 65527, 1441795, 0, 3, 1048579, 1, 65534, 1441795, 65531, 65532, 1048579, 65533, 65533, 3, 65531, 2, 1441795, 65531, 4, 1048579, 65528, 3, 655363, 65528, 4, 655363, 65533, 4, 1048579, 65534, 65534, 1048579, 3, 65535, 3, 3, 0, 1048579, 65532, 65534, 1441795, 4, 65534, 1441795, 4, 65535, 1048579, 4, 0, 1048579, 5, 65534, 1048579, 5, 1, 1048579, 6, 1, 1048579, 1, 4, 1441795, 0, 4, 1441795, 65530, 1, 1441795, 65529, 1, 3, 65529, 65535, 1441795, 65529, 65534, 3, 65526, 65531, 1441795, 65528, 65531, 1441795, 65525, 65532, 1441795, 65534, 65529, 1441795, 0, 65529, 1441795, 0, 65530, 1441795, 0, 65531, 1441795, 0, 5, 1441795, 65529, 5, 655363, 65527, 4, 655363, 65530, 6, 655363, 65527, 3, 655363, 4, 65533, 1441795, 5, 65533, 1441795, 5, 65532, 1441795, 6, 65531, 1441795, 6, 65530, 1441795, 6, 65529, 1441795, 5, 65528, 1441795, 7, 65528, 1441795, 7, 65525, 1441795, 7, 65524, 1441795, 8, 65524, 1441795, 8, 65525, 1441795, 8, 65526, 1441795, 5, 65531, 1441795, 65534, 65530, 1441795, 65533, 65529, 1441795, 65533, 65528, 1441795, 65533, 65525, 1441795, 65532, 65525, 1441795, 65532, 65524, 1441795, 65531, 65524, 1441795, 65530, 65524, 1441795, 65529, 65524, 1441795, 65529, 65525, 1441795, 65532, 65528, 1441795, 65531, 65529, 1441795, 0, 65535, 1441795, 0, 0, 1441795, 0, 1, 1441795, 65535, 1, 1441795, 65534, 1, 1441795, 65533, 1, 1441795, 65534, 2, 1441795, 65532, 2, 1441795, 65528, 65535, 1441795, 65528, 65534, 1441795, 65526, 65533, 1441795, 65527, 65532, 1441795, 65525, 65531, 1441795, 65525, 65533, 1441795, 65534, 3, 1441795, 65535, 3, 1441795, 1, 6, 1441795, 2, 6, 1441795, 3, 6, 1441795, 4, 6, 1441795, 5, 6, 1441795, 5, 7, 1441795, 8, 7, 1441795, 9, 7, 1441795, 10, 5, 1441795, 10, 3, 1441795, 11, 3, 1441795, 11, 2, 1441795, 12, 1, 1441795, 13, 1, 1441795, 13, 0, 1441795, 13, 65535, 1441795, 13, 65534, 1441795, 10, 65533, 1441795, 7, 65533, 1441795, 6, 65533, 1441795, 10, 1, 1441795, 10, 2, 1441795, 9, 2, 1441795, 8, 2, 1441795, 8, 3, 1441795, 9, 4, 1441795, 1, 9, 1441795, 0, 9, 1441795, 65535, 9, 1441795, 65534, 8, 1441795, 65533, 8, 1441795, 65532, 8, 1441795, 65532, 7, 1441795, 65533, 9, 1441795, 0, 10, 1441795, 1, 10, 1441795, 2, 10, 1441795, 4, 10, 1441795, 5, 10, 1441795, 2, 2, 1441795, 65532, 1, 1441795)
}
metadata/_editor_floor_ = Vector3(0, 0, 0)

[node name="walls" type="GridMap" parent="nav_region"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.5, 0)
mesh_library = ExtResource("12_8840w")
cell_size = Vector3(1, 1, 1)
data = {
"cells": PackedInt32Array(13, 65533, 1048576, 14, 65534, 1048576, 14, 65535, 1048576, 65532, 65527, 1048576, 65531, 65528, 0, 65530, 65527, 1441792, 65531, 65527, 1441792, 65531, 65526, 1441792, 131067, 65527, 1441792, 196603, 65527, 1441792, 262139, 65527, 1441792, 327675, 65527, 1441792, 327676, 65527, 1441792, 327675, 65528, 1441792, 327674, 65527, 1441792, 327675, 65526, 1441792, 393211, 65527, 1441792, 2, 65529, 1441792, 2, 65528, 1441792, 2, 65526, 1441792, 2, 65527, 1441792, 2, 65525, 1441792, 9, 65525, 1441792, 9, 65526, 1441792, 9, 65527, 1441792, 9, 65528, 1441792, 9, 65529, 1441792, 8, 65530, 1441792, 7, 65530, 1441792, 7, 65531, 1441792, 3, 65524, 1441792, 4, 65523, 1441792, 5, 65523, 1441792, 6, 65523, 1441792, 7, 65523, 1441792, 8, 65524, 1441792, 3, 65530, 1441792, 4, 65530, 1441792, 4, 65531, 1441792)
}
metadata/_editor_floor_ = Vector3(0, 0, 0)
